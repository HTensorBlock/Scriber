from uuid import uuid4
from django.db import models


class AnnotationsModel(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid4)
    text = models.TextField(blank=True, null=True, default="", max_length=32_768)
    start_offset = models.IntegerField(blank=True, null=True, default=-1)
    end_offset = models.IntegerField(blank=True, null=True, default=-1)
    label = models.ForeignKey('datasets.Labels', on_delete=models.DO_NOTHING, related_name='label_annotation', blank=False, null=False)
    state = models.CharField(max_length=255, blank=True, null=True)
    decision = models.ForeignKey('decisions.DatasetsDecisionsModel', on_delete=models.DO_NOTHING, related_name='decision_annotation', blank=True, null=True)
    # to add: annotator (user) or (model)
    human_annotator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='user_annotator', blank=True, null=True)
    
    creator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='annotations_creator', blank=False, null=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    updator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='annotations_updater', blank=True, null=True)
    deleted = models.BooleanField(default=False)
    # objects = models.Manager()

    
    def save(self, *args, **kwargs):
        self.clean()
        return super().save(*args, **kwargs)
    
    class Meta:
        abstract = True
        ordering = ['-created_at']
        indexes = [ 
            # models.Index(fields=['label',]),
            # models.Index(fields=['decision',]),
                   ]

class BinaryAnnotationsModel(AnnotationsModel):
    '''
    Supposed to contain the binary annotations for a whole decision
    '''
    start_offset = None
    end_offset = None
    text = None
    model_annotator = models.ForeignKey('ai_models.Ai_ModelsModel', on_delete=models.DO_NOTHING, related_name='model_annotator', blank=True, null=True)
    creator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='binary_annotations_creator', blank=False, null=False)
    decision = models.ForeignKey('decisions.DatasetsDecisionsModel', on_delete=models.DO_NOTHING, related_name='binary_annotations_decision', blank=False, null=False)
    # human_annotator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='binary_annotations_human_annotator', blank=True, null=True)
    label = models.ForeignKey('datasets.Labels', on_delete=models.DO_NOTHING, related_name='binary_annotations_label', blank=False, null=False)
    updator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='binary_annotations_updater', blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    class Meta:
        db_table = "binary_annotations"
        indexes = [
            models.Index(fields=[ 'label',]),
            models.Index(fields=[ 'decision',]),]
        ordering = ['-created_at']
        
        
    def save(self, *args, **kwargs):
        self.clean()
        return super().save(*args, **kwargs)

class TextAnnotationsModel(AnnotationsModel):
    '''
    Single text annotation
    '''
    creator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='text_annotations_creator', blank=False, null=False)
    decision = models.ForeignKey('decisions.DatasetsDecisionsModel', on_delete=models.DO_NOTHING, related_name='text_annotations_decision', blank=False, null=False)
    human_annotator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='text_annotations_human_annotator', blank=True, null=True)
    label = models.ForeignKey('datasets.Labels', on_delete=models.DO_NOTHING, related_name='text_annotations_label', blank=False, null=False)
    updator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='text_annotations_updater', blank=True, null=True)
    class Meta(AnnotationsModel.Meta):
        db_table = "text_annotations"
        

class ExtractionAnnotationsModel(models.Model):
    '''
    Supposed to contain the extraction annotations generated by a prompt
    '''
    id = models.UUIDField(primary_key=True, default=uuid4)
    # extraction annotations can be composed of text and/or binary annotations

    text_annotations = models.ManyToManyField('annotations.TextAnnotationsModel', related_name='extraction_annotations', blank=True,  through='annotations.ExtractionTextAnnotationsModel')
    binary_annotations = models.ManyToManyField('annotations.BinaryAnnotationsModel', related_name='extraction_annotations', blank=True,  through='annotations.ExtractionBinaryAnnotationsModel')
    
    model_annotator = models.ForeignKey('ai_models.Ai_ModelsModel', on_delete=models.DO_NOTHING, related_name='extraction_model_annotator', blank=True, null=True)

    state = models.CharField(max_length=255, blank=True, null=True)
    creator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='extraction_annotations_creator', blank=False, null=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    class Meta(AnnotationsModel.Meta):
        db_table = "extraction_annotations"

class ExtractionTextAnnotationsModel(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid4)
    extraction = models.ForeignKey('annotations.ExtractionAnnotationsModel', on_delete=models.DO_NOTHING, related_name='extraction_text', blank=False, null=False)
    text_annotation = models.ForeignKey('annotations.TextAnnotationsModel', on_delete=models.DO_NOTHING, related_name='text_extraction', blank=False, null=False)
    # state = models.CharField(max_length=255, blank=True, null=True)
    
    class Meta:
        db_table = "extraction_text_annotations"
        constraints = [
            models.UniqueConstraint(fields=['extraction', 'text_annotation'], name='unique_extraction_text_annotation')
        ]
        indexes = [
            models.Index(fields=['extraction',]),
            models.Index(fields=['text_annotation',]),
                   ]
        
class ExtractionBinaryAnnotationsModel(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid4)
    extraction = models.ForeignKey('annotations.ExtractionAnnotationsModel', on_delete=models.DO_NOTHING, related_name='extraction_binary', blank=False, null=False)
    binary_annotation = models.ForeignKey('annotations.BinaryAnnotationsModel', on_delete=models.DO_NOTHING, related_name='binary_extraction', blank=False, null=False)
    # state = models.CharField(max_length=255, blank=True, null=True)
    
    human_annotator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='extraction_human_annotator', blank=True, null=True)
    model_annotator = models.ForeignKey('ai_models.Ai_ModelsModel', on_delete=models.DO_NOTHING, related_name='extraction_binary_model_annotator', blank=True, null=True)

    class Meta:
        db_table = "extraction_binary_annotations"
        constraints = [
            models.UniqueConstraint(fields=['extraction', 'binary_annotation'], name='unique_extraction_binary_annotation')
        ]
        indexes = [
            models.Index(fields=['extraction',]),
            models.Index(fields=['binary_annotation',]),
                   ]
        